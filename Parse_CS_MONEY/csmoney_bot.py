from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram import Bot, types
from config import TOKEN
from aiogram.dispatcher.filters import CommandStart, Text
from aiogram.utils.markdown import hbold, hlink
from main import collect_data
import json
import time


bot = Bot(token = TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

@dp.message_handler(CommandStart())
async def start(message:types.Message):
    start_buttons = ['üî™ –ù–æ–∂–∏', 'ü•ä –ü–µ—Ä—á–∞—Ç–∫–∏', 'üî´ –°–Ω–∞–π–ø–µ—Ä—Å–∫–∏–µ –≤–∏–Ω—Ç–æ–≤–∫–∏']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons)
    
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é!', reply_markup=keyboard)
    
@dp.message_handler(Text(equals='üî™ –ù–æ–∂–∏'))
async def get_discount_knives (message:types.Message):
    await message.answer('Please waiting...')
    
    collect_data(cat_type=2)
    
    with open('result.json', encoding='utf-8') as file:
        data = json.load(file)

    for index,item in enumerate(data):
        card = f"{hlink(item.get('item name'), item.get('item 3d link'))}\n" \
            f"{hbold('–°–∫–∏–¥–∫–∞: ')}{item.get('overprice')} %\n" \
            f"{hbold('–¶–µ–Ω–∞: ')}{item.get('item price')} üî•\n" \
            f"{hbold('–ü–∞—Ç–µ—Ä–Ω: ')}{item.get('pattern')}"
        
        if index % 20 == 0:   #–ï—Å–ª–∏ –æ—Ç–æ—Å–ª–∞–ª–æ—Å—å 20 —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–æ –º—ã –∑–∞—Å—ã–ø–∞–µ–º –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã
            time.sleep(3)    
            
        await message.answer(card)
        
        
@dp.message_handler(Text(equals='üî´ –°–Ω–∞–π–ø–µ—Ä—Å–∫–∏–µ –≤–∏–Ω—Ç–æ–≤–∫–∏'))
async def get_discount_knives (message:types.Message):
    await message.answer('Please waiting...')
    
    collect_data(cat_type=4)
    
    with open('result.json', encoding='utf-8') as file:
        data = json.load(file)

    for index,item in enumerate(data):
        card = f"{hlink(item.get('item name'), item.get('item 3d link'))}\n" \
            f"{hbold('–°–∫–∏–¥–∫–∞: ')}{item.get('overprice')} %\n" \
            f"{hbold('–¶–µ–Ω–∞: ')}{item.get('item price')} üî•\n" \
            f"{hbold('–ü–∞—Ç–µ—Ä–Ω: ')}{item.get('pattern')}"
            
        if index % 20 == 0:   #–ï—Å–ª–∏ –æ—Ç–æ—Å–ª–∞–ª–æ—Å—å 20 —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–æ –º—ã –∑–∞—Å—ã–ø–∞–µ–º –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã
            time.sleep(3)    
            
        await message.answer(card)
        
        
@dp.message_handler(Text(equals='ü•ä –ü–µ—Ä—á–∞—Ç–∫–∏'))
async def get_discount_knives (message:types.Message):
    await message.answer('Please waiting...')
    
    collect_data(cat_type=13)
    
    with open('result.json', encoding='utf-8') as file:
        data = json.load(file)

    for index,item in enumerate(data):
        card = f"{hlink(item.get('item name'), item.get('item 3d link'))}\n" \
            f"{hbold('–°–∫–∏–¥–∫–∞: ')}{item.get('overprice')} %\n" \
            f"{hbold('–¶–µ–Ω–∞: ')}{item.get('item price')} üî•\n" \
            f"{hbold('–ü–∞—Ç–µ—Ä–Ω: ')}{item.get('pattern')}"
            
        if index % 20 == 0:   #–ï—Å–ª–∏ –æ—Ç–æ—Å–ª–∞–ª–æ—Å—å 20 —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–æ –º—ã –∑–∞—Å—ã–ø–∞–µ–º –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã
            time.sleep(3)    
            
        await message.answer(card)
                    
    
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates = True)