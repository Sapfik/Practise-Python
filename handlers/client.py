from aiogram import types
from aiogram.dispatcher.dispatcher import Dispatcher
from aiogram.types import InlineKeyboardMarkup
from aiogram.types.inline_keyboard import InlineKeyboardButton
from create_bot import dp, bot
from keyboards import client_kb as nav
from data_base import sqlite_db
import logging


# def check_sub_members(chat_member):
#     print(chat_member['status'])
#     if chat_member['status'] != 'left':
#         return True
#     else:
#         return False



async def welcome (message : types.Message):
  try:
    await bot.send_message(message.from_user.id, '–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–µ—Ç–∏—Ç–∞', reply_markup=nav.kb_client)
    await message.delete()
      
  except:
    await message.reply(f'{message.from_user.first_name}, –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: \nhttps://t.me/Pizza_Nemo_Bot \n–ò —Å–¥–µ–ª–∞–π—Ç–µ –∑–∞–∫–∞–∑! ü§°')




async def command_operation_mode (message: types.Message):
  
  await bot.send_message (message.from_user.id, '–ü–ù - –ü–¢: 10:00 - 23:00  \nC–± –∏ –í—Å : 9:00 - 2:00 üóì')
  await message.delete()



async def command_adress (message:types.Message):
  await bot.send_message (message.from_user.id, '–£–ª–∏—Ü–∞: –ü—É—à–∫–∏–Ω–∞ üèò \n–î–æ–º: –ö–∞–ª–∞—Ç—É—à–∫–∏–Ω–∞üè†')
  await message.delete()


async def send_photo(message:types.Message):
  chat_id = message.chat.id 
  text = '–ü—Ä–∏–≤–µ—Ç, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª =)'
  markup = InlineKeyboardMarkup (
    inline_keyboard=[
      [
        InlineKeyboardButton (text = '–ü–æ–¥–ø–∏—à–∏—Å—å', url = 'https://www.youtube.com/channel/UCXRAoUWcfu-wRxBy58uD7lA'),
        InlineKeyboardButton (text = '–ü–æ–¥–ø–∏—Å–∞–Ω', callback_data = '123')
      ],
      [
        InlineKeyboardButton (text = '–ú–æ–π –¢–µ–ª–µ–≥—Ä–∞–º', url = 'https://t.me/ILYACHEREMISIN')
      ]
    ]
  )
  photo = open("TRUE PIZZA.jpg", 'rb')
  #await bot.send_message (chat_id=chat_id, text = text, reply_markup=markup)
  await bot.send_photo (caption='–ü—Ä–∏–º–µ—Ä –Ω–∞—à–µ–π –ø–∏—Ü—Ü—ã', chat_id=chat_id, photo=photo, reply_markup=markup)
  await message.delete()


@dp.message_handler(commands=['–ú–µ–Ω—é'])
@dp.message_handler(lambda message: '–ú–µ–Ω—é' in message.text)
async def menu_command(message: types.Message):
  await sqlite_db.sql_read(message)




def register_handlers_client (dp:Dispatcher):
    dp.register_message_handler (welcome, commands=['start', 'help'])
    dp.register_message_handler (command_operation_mode, commands=['operating_mode', 'Operation_mode'])
    dp.register_message_handler (command_operation_mode, lambda message: '–†–µ–∂–∏–º' in message.text)
    dp.register_message_handler (command_operation_mode, lambda message: '—Ä–µ–∂–∏–º' in message.text)
    dp.register_message_handler (command_adress, lambda message: '–ê–¥—Ä–µ—Å' in message.text)
    dp.register_message_handler (command_adress, lambda message: '–∞–¥—Ä–µ—Å' in message.text)
    dp.register_message_handler (command_adress, commands=['adress', 'Adress'])
    dp.register_message_handler (send_photo, commands=['varients', 'Varients'])
    dp.register_message_handler(send_photo,lambda message: '–í–∞—Ä–∏–∞–Ω—Ç' in message.text)
    dp.register_message_handler(send_photo,lambda message: '–≤–∞—Ä–∏–∞–Ω—Ç' in message.text)
    dp.register_message_handler(send_photo,lambda message: '–ü—Ä–∏–º–µ—Ä' in message.text)
    dp.register_message_handler(send_photo,lambda message: '–ø—Ä–∏–º–µ—Ä' in message.text)
    # dp.register_message_handler(menu_command, commands=['–ú–µ–Ω—é'])
    # dp.register_message_handler(send_photo,lambda message: '–ú–µ–Ω—é' in message.text)
