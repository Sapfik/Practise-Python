from aiogram import types
from aiogram.dispatcher.dispatcher import Dispatcher
from aiogram.types import InlineKeyboardMarkup
from aiogram.types.inline_keyboard import InlineKeyboardButton
from create_bot import dp, bot
from keyboards import client_kb as nav
from data_base import sqlite_db
import logging

logging.basicConfig(level = logging.INFO)
CHANNEL_ID = '@testchannel1256'  
NOTSUB_MESSAGE = '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!'


def check_sub_members(chat_member):
    print(chat_member['status'])
    if chat_member['status'] != 'left':
        return True
    else:
        return False


@dp.message_handler ( commands=['start', 'help'])
async def welcome (message : types.Message):
  try:
    if message.chat.type == 'private':
        if check_sub_members(await bot.get_chat_member(chat_id= CHANNEL_ID, user_id=message.from_user.id)):
        #await bot.get_chat_member() - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–π–¥–∏ —é–∑–µ—Ä–∞ –∏ –∞–π–¥–∏ —á–∞—Ç–∞
            await bot.send_message(message.from_user.id, '–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–µ—Ç–∏—Ç–∞!', reply_markup=nav.kb_client)
        else:
            await bot.send_message(message.from_user.id, NOTSUB_MESSAGE, reply_markup=nav.checkSubMenu)
  except:
    await message.reply(f'{message.from_user.first_name}, –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: \nhttps://t.me/Pizza_Nemo_Bot \n–ò —Å–¥–µ–ª–∞–π—Ç–µ –∑–∞–∫–∞–∑! ü§°')


@dp.message_handler ( commands=['operating_mode', 'Operation_mode'])
@dp.message_handler ( lambda message: '–†–µ–∂–∏–º' in message.text)
@dp.message_handler (lambda message: '—Ä–µ–∂–∏–º' in message.text)
@dp.message_handler ( lambda message: '–ê–¥—Ä–µ—Å' in message.text)
@dp.message_handler (lambda message: '–∞–¥—Ä–µ—Å' in message.text)
@dp.message_handler (commands=['adress', 'Adress'])
@dp.message_handler (commands=['varients', 'Varients'])
@dp.message_handler(lambda message: '–í–∞—Ä–∏–∞–Ω—Ç' in message.text)
@dp.message_handler(lambda message: '–≤–∞—Ä–∏–∞–Ω—Ç' in message.text)
@dp.message_handler(lambda message: '–ü—Ä–∏–º–µ—Ä' in message.text)
@dp.message_handler(lambda message: '–ø—Ä–∏–º–µ—Ä' in message.text)
@dp.message_handler(commands=['–ú–µ–Ω—é'])
@dp.message_handler(lambda message: '–ú–µ–Ω—é' in message.text)
@dp.message_handler()
async def bot_message(message: types.Message):
    if message.chat.type == 'private':
        if check_sub_members(await bot.get_chat_member(chat_id= CHANNEL_ID, user_id=message.from_user.id)):
            if message.text.lower() == '–º–µ–Ω—é':
                await bot.send_message(message.from_user.id, await sqlite_db.sql_read(message))
            elif message.text.lower()== '—Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã':
                await bot.send_message (message.from_user.id, '–ü–ù - –ü–¢: 10:00 - 23:00  \nC–± –∏ –í—Å : 9:00 - 2:00 üóì')
                await message.delete()
            elif message.text.lower() == '–∞–¥—Ä–µ—Å':
                  await bot.send_message (message.from_user.id, '–£–ª–∏—Ü–∞: –ü—É—à–∫–∏–Ω–∞ üèò \n–î–æ–º: –ö–∞–ª–∞—Ç—É—à–∫–∏–Ω–∞üè†')
                  await message.delete()
            elif message.text.lower() == '–≤–∞—Ä–∏–∞–Ω—Ç' or message.text.lower() == '–ø—Ä–∏–º–µ—Ä':
                chat_id = message.chat.id 
                text = '–ü—Ä–∏–≤–µ—Ç, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª =)'
                markup = InlineKeyboardMarkup (
                  inline_keyboard=[
                    [
                      InlineKeyboardButton (text = '–ü–æ–¥–ø–∏—à–∏—Å—å', url = 'https://www.youtube.com/channel/UCXRAoUWcfu-wRxBy58uD7lA'),
                      InlineKeyboardButton (text = '–ü–æ–¥–ø–∏—Å–∞–Ω', callback_data = '123')
                    ],
                    [
                      InlineKeyboardButton (text = '–ú–æ–π –¢–µ–ª–µ–≥—Ä–∞–º', url = 'https://t.me/ILYACHEREMISIN')
                    ]
                  ]
                )
                photo = open("TRUE PIZZA.jpg", 'rb')
                #await bot.send_message (chat_id=chat_id, text = text, reply_markup=markup)
                await bot.send_photo (caption='–ü—Ä–∏–º–µ—Ä –Ω–∞—à–µ–π –ø–∏—Ü—Ü—ã', chat_id=chat_id, photo=photo, reply_markup=markup)
                await message.delete()
            else:
                await bot.send_message(message.from_user.id,'–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, —Ö–æ–∑—è–∏–Ω =(')
        else:
            await bot.send_message(message.from_user.id, NOTSUB_MESSAGE, reply_markup=nav.checkSubMenu)


@dp.callback_query_handler(text = 'sub_channel_done')
async def sub_channel_done(callback: types.Message):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    if check_sub_members(await bot.get_chat_member(chat_id= CHANNEL_ID, user_id=callback.from_user.id)):
        await bot.send_message(callback.from_user.id, '–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–µ—Ç–∏—Ç–∞', reply_markup=nav.kb_client)
    else:
        await bot.send_message(callback.from_user.id, NOTSUB_MESSAGE, reply_markup=nav.checkSubMenu)



def register_handlers_client (dp:Dispatcher):
    dp.register_message_handler (welcome, commands=['start', 'help'])
    dp.register_message_handler (bot_message, commands=['operating_mode', 'Operation_mode'])
    dp.register_message_handler (bot_message, lambda message: '–†–µ–∂–∏–º' in message.text)
    dp.register_message_handler (bot_message, lambda message: '—Ä–µ–∂–∏–º' in message.text)
    dp.register_message_handler (bot_message, lambda message: '–ê–¥—Ä–µ—Å' in message.text)
    dp.register_message_handler (bot_message, lambda message: '–∞–¥—Ä–µ—Å' in message.text)
    dp.register_message_handler (bot_message, commands=['adress', 'Adress'])
    dp.register_message_handler (bot_message, commands=['varients', 'Varients'])
    dp.register_message_handler(bot_message,lambda message: '–í–∞—Ä–∏–∞–Ω—Ç' in message.text)
    dp.register_message_handler(bot_message,lambda message: '–≤–∞—Ä–∏–∞–Ω—Ç' in message.text)
    dp.register_message_handler(bot_message,lambda message: '–ü—Ä–∏–º–µ—Ä' in message.text)
    dp.register_message_handler(bot_message,lambda message: '–ø—Ä–∏–º–µ—Ä' in message.text)




