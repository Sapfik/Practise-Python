from aiogram.types import message
import requests
import datetime
from config import weather_token, token_bot
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram import Bot, types

bot = Bot(token = token_bot, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

@dp.message_handler(commands='start')
async def start_command (message:types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã!")
    
@dp.message_handler()
async def get_weather(message:types.Message):
    code_to_smile  = {
        "Clear" : "–Ø—Å–Ω–æ \U00002600",
        "Clouds" : "–û–±–ª–∞—á–Ω–æ \U00002601",
        "Rain" : '–î–æ–∂–¥—å \U00002614',
        "Drizzle" : "–î–æ–∂–¥—å \U00002614",
        "Thundertorm" : "–ì—Ä–æ–∑–∞ \U000026A1",
        "Snow" : "–°–Ω–µ–≥ \U0001F328",
        "Mist" : '–¢—É–º–∞–Ω \U0001F32B'
    }
    
      
    try:
        r = requests.get(url = f'https://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={weather_token}&units=metric')
        data = r.json()   # –ú–æ–∂–µ–º —á–∏—Ç–∞—Ç—å json, —Ç–∞–∫ –∫–∞–∫ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–≤–º–µ—Å—Ç–∏–º —Å Python –∏ –¥–∞–µ—Ç –µ–º—É –¥–∞–Ω–Ω—ã–µ –∏–∑ json
        # pprint(data)   # pprint() - —Ç–∞–∫ –∫–∞–∫ –º—ã —Ö–æ—Ç–∏–º —Å–¥–µ–ª–∞—Ç—å json –±–æ–ª–µ–µ —Å—Ç—Ä—É–∫—Ç—É–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
        
        city = data['name']
        temp = data['main']['temp']
        
        weather_description = data['weather'][0]['main']
        if weather_description in code_to_smile:
            wd = code_to_smile[weather_description]
            
        else:
            wd = '–í—ã–≥–ª—è–Ω–∏ –≤ –æ–∫–Ω–æ –∏ —Å–∞–º –≤—Å–µ —É–≤–∏–¥–∏—à—å!'
        
        humidity = data['main']['humidity']
        pressure = data['main']['pressure']
        wind = data['wind']['speed']
        sunrise_time = datetime.datetime.fromtimestamp(data['sys']['sunrise'])
        sunset_time = datetime.datetime.fromtimestamp(data['sys']['sunset'])
        lenght_of_the_day = datetime.datetime.fromtimestamp(data['sys']['sunset']) - datetime.datetime.fromtimestamp(
            data['sys']['sunrise'])
        
        await message.answer(f"üïêüïêüïê {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')} üïêüïêüïê\n" \
              f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp} ¬∞C {wd}\n"\
              f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity} %\n–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç\n"\
              f"–í–µ—Ç–µ—Ä: {wind} –º/—Å\n–í—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞: {sunrise_time}\n"\
              f"–í—Ä–µ–º—è –∑–∞—Ö–æ–¥–∞: {sunset_time}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {lenght_of_the_day}\n"\
              f"üî•üî•üî• –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üî•üî•üî•"
              )
        
    except :
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')
    
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)